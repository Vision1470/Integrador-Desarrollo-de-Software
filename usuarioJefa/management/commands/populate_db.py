from django.core.management.base import BaseCommand
from django.utils import timezone
from django.db import transaction
from datetime import datetime, timedelta
import random

from login.models import Usuarios, AreaEspecialidad, Fortaleza
from usuarioJefa.models import (
    Paciente, Compuesto, Medicamento, Instrumento, 
    AsignacionCalendario, GravedadPaciente, NivelPrioridadArea
)


class Command(BaseCommand):
    help = 'Poblar la base de datos con datos de prueba para testing'

    def add_arguments(self, parser):
        parser.add_argument(
            '--full',
            action='store_true',
            help='Crear dataset completo (m√°s datos)',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üöÄ Iniciando poblaci√≥n de base de datos...')
        )
        
        try:
            with transaction.atomic():
                # Limpiar datos existentes (opcional)
                if options['full']:
                    self.limpiar_datos_existentes()
                
                # Crear datos b√°sicos
                fortalezas = self.crear_fortalezas()
                areas = self.crear_areas(fortalezas)
                jefa_piso = self.crear_jefa_piso()
                enfermeros = self.crear_enfermeros(areas, fortalezas)
                doctores = self.crear_doctores(areas, fortalezas)
                
                # Crear medicamentos e instrumentos
                self.crear_medicamentos_instrumentos()
                
                # Crear pacientes con gravedad
                pacientes = self.crear_pacientes(areas, doctores, enfermeros)
                
                # Crear asignaciones de calendario
                self.crear_asignaciones_calendario(enfermeros, areas)
                
                # Asignar niveles de prioridad a √°reas
                self.asignar_prioridades_areas(areas)
                
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ Base de datos poblada exitosamente!')
                )
                self.mostrar_resumen(areas, enfermeros, doctores, pacientes)
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Error al poblar base de datos: {str(e)}')
            )

    def limpiar_datos_existentes(self):
        """Limpia datos existentes (opcional)"""
        self.stdout.write('üßπ Limpiando datos existentes...')
        
        # Eliminar usuarios (excepto superuser)
        Usuarios.objects.filter(is_superuser=False).delete()
        
        # Limpiar otros datos
        Paciente.objects.all().delete()
        AsignacionCalendario.objects.all().delete()
        GravedadPaciente.objects.all().delete()

    def crear_fortalezas(self):
        """Crear fortalezas m√©dicas"""
        self.stdout.write('üìã Creando fortalezas...')
        
        fortalezas_data = [
            ('Cuidados Intensivos', 'Atenci√≥n especializada en UCI'),
            ('Pediatr√≠a', 'Atenci√≥n m√©dica a ni√±os'),
            ('Geriatr√≠a', 'Atenci√≥n a pacientes de la tercera edad'),
            ('Cardiolog√≠a', 'Cuidados cardiovasculares'),
            ('Neurolog√≠a', 'Atenci√≥n neurol√≥gica'),
            ('Traumatolog√≠a', 'Cuidados de fracturas y traumas'),
            ('Medicamentos IV', 'Administraci√≥n intravenosa'),
            ('Curaciones', 'Cuidado de heridas'),
            ('Vendajes', 'Aplicaci√≥n de vendajes'),
            ('Inyecciones', 'Administraci√≥n de inyecciones'),
            ('Sueros', 'Aplicaci√≥n de sueros'),
            ('Terapia Respiratoria', 'Cuidados respiratorios'),
        ]
        
        fortalezas = []
        for nombre, descripcion in fortalezas_data:
            fortaleza, created = Fortaleza.objects.get_or_create(
                nombre=nombre,
                defaults={'descripcion': descripcion}
            )
            fortalezas.append(fortaleza)
            if created:
                self.stdout.write(f'  ‚úì Fortaleza creada: {nombre}')
        
        return fortalezas

    def crear_areas(self, fortalezas):
        """Crear √°reas de especialidad"""
        self.stdout.write('üè• Creando √°reas de especialidad...')
        
        areas_data = [
            ('Urgencias', 'Atenci√≥n de emergencias m√©dicas', [0, 6, 7, 9]),
            ('Medicina Interna', 'Atenci√≥n m√©dica general', [3, 6, 10]),
            ('Cirug√≠a', 'Sala de cirug√≠a y post-operatorio', [0, 5, 7, 8]),
            ('Pediatr√≠a', 'Atenci√≥n pedi√°trica', [1, 7, 8, 9]),
            ('Cuidados Intensivos', 'UCI para pacientes cr√≠ticos', [0, 3, 6, 11]),
            ('Cardiolog√≠a', 'Unidad cardiovascular', [3, 6, 10, 11]),
            ('Neurolog√≠a', 'Unidad neurol√≥gica', [4, 6, 7]),
            ('Traumatolog√≠a', 'Atenci√≥n de traumas y fracturas', [5, 7, 8, 9]),
        ]
        
        areas = []
        for nombre, descripcion, fortalezas_indices in areas_data:
            area, created = AreaEspecialidad.objects.get_or_create(
                nombre=nombre,
                defaults={'descripcion': descripcion}
            )
            
            # Asignar fortalezas al √°rea
            fortalezas_area = [fortalezas[i] for i in fortalezas_indices]
            area.fortalezas.set(fortalezas_area)
            
            areas.append(area)
            if created:
                self.stdout.write(f'  ‚úì √Årea creada: {nombre}')
        
        return areas

    def crear_jefa_piso(self):
        """Crear usuario jefa de piso"""
        self.stdout.write('üë©‚Äç‚öïÔ∏è Creando jefa de piso...')
        
        jefa, created = Usuarios.objects.get_or_create(
            username='jefa_piso',
            defaults={
                'first_name': 'Mar√≠a',
                'apellidos': 'Gonz√°lez Rodr√≠guez',
                'tipoUsuario': 'JP',
                'edad': 45,
                'fechaNacimiento': '1978-03-15',
                'estaActivo': True,
                'primerIngreso': False,
                'email': 'jefa@hospital.com'
            }
        )
        
        if created:
            jefa.set_password('jefa123')
            jefa.save()
            self.stdout.write('  ‚úì Jefa de piso creada: jefa_piso / jefa123')
        
        return jefa

    def crear_enfermeros(self, areas, fortalezas):
        """Crear enfermeros"""
        self.stdout.write('üë®‚Äç‚öïÔ∏è Creando enfermeros...')
        
        nombres_enfermeros = [
            ('Ana', 'Mart√≠nez L√≥pez'),
            ('Carlos', 'Fern√°ndez Garc√≠a'),
            ('Luc√≠a', 'Rodr√≠guez P√©rez'),
            ('Miguel', 'L√≥pez Hern√°ndez'),
            ('Elena', 'Garc√≠a Mart√≠n'),
            ('David', 'Hern√°ndez Ruiz'),
            ('Carmen', 'P√©rez Gonz√°lez'),
            ('Alejandro', 'Mart√≠n D√≠az'),
            ('Isabel', 'D√≠az Moreno'),
            ('Roberto', 'Moreno Jim√©nez'),
            ('Patricia', 'Jim√©nez √Ålvarez'),
            ('Francisco', '√Ålvarez Romero'),
            ('Beatriz', 'Romero Torres'),
            ('Javier', 'Torres Vargas'),
            ('Cristina', 'Vargas Castillo'),
            ('Sergio', 'Castillo Ortega'),
        ]
        
        enfermeros = []
        for i, (nombre, apellidos) in enumerate(nombres_enfermeros):
            username = f'enf_{nombre.lower()}{i+1:02d}'
            
            # Asignar √°rea aleatoria
            area_especialidad = random.choice(areas)
            
            enfermero, created = Usuarios.objects.get_or_create(
                username=username,
                defaults={
                    'first_name': nombre,
                    'apellidos': apellidos,
                    'tipoUsuario': 'EN',
                    'edad': random.randint(23, 55),
                    'fechaNacimiento': f'{random.randint(1970, 2000)}-{random.randint(1, 12):02d}-{random.randint(1, 28):02d}',
                    'areaEspecialidad': area_especialidad,
                    'estaActivo': True,
                    'primerIngreso': False,
                    'email': f'{username}@hospital.com'
                }
            )
            
            if created:
                enfermero.set_password('enf123')
                # Asignar 2-4 fortalezas aleatorias
                fortalezas_enfermero = random.sample(fortalezas, random.randint(2, 4))
                enfermero.fortalezas.set(fortalezas_enfermero)
                enfermero.save()
                
                self.stdout.write(f'  ‚úì Enfermero: {username} / enf123 ({area_especialidad.nombre})')
            
            enfermeros.append(enfermero)
        
        return enfermeros

    def crear_doctores(self, areas, fortalezas):
        """Crear doctores"""
        self.stdout.write('üë®‚Äç‚öïÔ∏è Creando doctores...')
        
        nombres_doctores = [
            ('Dr. Juan', 'M√©ndez Salinas'),
            ('Dra. Laura', 'V√°squez Cruz'),
            ('Dr. Pedro', 'Guerrero Luna'),
            ('Dra. Sof√≠a', 'Campos Herrera'),
            ('Dr. Ricardo', 'Morales Vega'),
            ('Dra. Andrea', 'Silva Contreras'),
            ('Dr. Fernando', 'Reyes Aguilar'),
            ('Dra. M√≥nica', 'Guti√©rrez Soto'),
        ]
        
        doctores = []
        for i, (nombre, apellidos) in enumerate(nombres_doctores):
            username = f'doc_{nombre.split(".")[1].lower()}{i+1:02d}'
            
            # Asignar √°rea aleatoria
            area_especialidad = random.choice(areas)
            
            doctor, created = Usuarios.objects.get_or_create(
                username=username,
                defaults={
                    'first_name': nombre,
                    'apellidos': apellidos,
                    'tipoUsuario': 'DR',
                    'edad': random.randint(28, 65),
                    'fechaNacimiento': f'{random.randint(1960, 1995)}-{random.randint(1, 12):02d}-{random.randint(1, 28):02d}',
                    'areaEspecialidad': area_especialidad,
                    'estaActivo': True,
                    'primerIngreso': False,
                    'email': f'{username}@hospital.com'
                }
            )
            
            if created:
                doctor.set_password('doc123')
                # Asignar 1-3 fortalezas aleatorias relacionadas con su √°rea
                fortalezas_doctor = random.sample(fortalezas, random.randint(1, 3))
                doctor.fortalezas.set(fortalezas_doctor)
                doctor.save()
                
                self.stdout.write(f'  ‚úì Doctor: {username} / doc123 ({area_especialidad.nombre})')
            
            doctores.append(doctor)
        
        return doctores

    def crear_medicamentos_instrumentos(self):
        """Crear medicamentos e instrumentos"""
        self.stdout.write('üíä Creando medicamentos e instrumentos...')
        
        # Crear compuestos
        compuestos_data = [
            'Paracetamol', 'Ibuprofeno', 'Aspirina', 'Amoxicilina',
            'Diclofenaco', 'Omeprazol', 'Losart√°n', 'Metformina'
        ]
        
        compuestos = []
        for nombre in compuestos_data:
            compuesto, created = Compuesto.objects.get_or_create(
                nombre=nombre,
                defaults={'descripcion': f'Compuesto activo {nombre}'}
            )
            compuestos.append(compuesto)
        
        # Crear medicamentos
        medicamentos_data = [
            ('Paracetamol', '500', [0], 500),
            ('Ibuprofeno', '400', [1], 300),
            ('Aspirina', '100', [2], 200),
            ('Amoxicilina', '500', [3], 150),
            ('Diclofenaco', '50', [4], 100),
            ('Omeprazol', '20', [5], 250),
            ('Losart√°n', '50', [6], 180),
            ('Metformina', '850', [7], 300),
        ]
        
        for nombre, gramaje, compuestos_indices, cantidad in medicamentos_data:
            medicamento, created = Medicamento.objects.get_or_create(
                nombre=nombre,
                gramaje=gramaje,
                defaults={'cantidad_disponible': cantidad}
            )
            if created:
                medicamento.compuestos.set([compuestos[i] for i in compuestos_indices])
        
        # Crear instrumentos
        instrumentos_data = [
            ('Tensi√≥metro Digital', 15, 'Monitor de presi√≥n arterial autom√°tico'),
            ('Term√≥metro Infrarrojo', 25, 'Term√≥metro sin contacto'),
            ('Ox√≠metro de Pulso', 30, 'Medidor de saturaci√≥n de ox√≠geno'),
            ('Estetoscopio', 20, 'Estetoscopio cl√≠nico profesional'),
            ('Jeringas 5ml', 500, 'Jeringas desechables de 5ml'),
            ('Gasas Est√©riles', 200, 'Gasas est√©riles 10x10cm'),
            ('Vendas El√°sticas', 100, 'Vendas el√°sticas de diferentes tama√±os'),
        ]
        
        for nombre, cantidad, especificaciones in instrumentos_data:
            Instrumento.objects.get_or_create(
                nombre=nombre,
                defaults={
                    'cantidad': cantidad,
                    'especificaciones': especificaciones
                }
            )

    def crear_pacientes(self, areas, doctores, enfermeros):
        """Crear pacientes con diferentes niveles de gravedad"""
        self.stdout.write('üè• Creando pacientes...')
        
        # Validaciones previas
        if not areas:
            self.stdout.write(self.style.ERROR('‚ùå No hay √°reas disponibles'))
            return []
        if not doctores:
            self.stdout.write(self.style.ERROR('‚ùå No hay doctores disponibles'))
            return []
        if not enfermeros:
            self.stdout.write(self.style.ERROR('‚ùå No hay enfermeros disponibles'))
            return []
        
        nombres_pacientes = [
            ('Jos√©', 'Ram√≠rez', 'M'), ('Mar√≠a', 'L√≥pez', 'F'),
            ('Antonio', 'Garc√≠a', 'M'), ('Carmen', 'Hern√°ndez', 'F'),
            ('Manuel', 'Mart√≠n', 'M'), ('Pilar', 'S√°nchez', 'F'),
            ('Francisco', 'Gonz√°lez', 'M'), ('Dolores', 'D√≠az', 'F'),
            ('Juan', 'Rodr√≠guez', 'M'), ('Mercedes', 'P√©rez', 'F'),
            ('Luis', 'Fern√°ndez', 'M'), ('Antonia', 'G√≥mez', 'F'),
            ('Miguel', 'Ruiz', 'M'), ('Francisca', 'Moreno', 'F'),
            ('Jes√∫s', 'Mu√±oz', 'M'), ('Isabel', '√Ålvarez', 'F'),
            ('Rafael', 'Jim√©nez', 'M'), ('Ana', 'Romero', 'F'),
            ('Carlos', 'Navarro', 'M'), ('Rosario', 'Torres', 'F'),
            ('Andr√©s', 'Dom√≠nguez', 'M'), ('Teresa', 'V√°zquez', 'F'),
            ('Ricardo', 'Morales', 'M'), ('Concepci√≥n', 'Ramos', 'F'),
            ('Fernando', 'Gil', 'M'), ('Esperanza', 'Serrano', 'F'),
            ('Eduardo', 'Blanco', 'M'), ('Purificaci√≥n', 'Molina', 'F'),
            ('Ram√≥n', 'Castro', 'M'), ('Amparo', 'Ortega', 'F'),
            ('Alberto', 'Vargas', 'M'), ('Gloria', 'Medina', 'F'),
            ('Enrique', 'Herrera', 'M'), ('Remedios', 'Garrido', 'F'),
            ('Vicente', 'Ib√°√±ez', 'M'), ('Cristina', 'Guerrero', 'F'),
            ('√Ångel', 'Mendoza', 'M'), ('Silvia', 'Cortes', 'F'),
            ('Pablo', 'Castillo', 'M'), ('Beatriz', 'Le√≥n', 'F'),
        ]
        
        pacientes = []
        for i, (nombre, apellido, sexo) in enumerate(nombres_pacientes):
            # Asignar √°rea aleatoria
            area = random.choice(areas)
            
            # Buscar doctores en esa √°rea, si no hay, usar cualquier doctor
            doctores_area = [d for d in doctores if d.areaEspecialidad == area]
            if not doctores_area:
                doctores_area = doctores  # Usar cualquier doctor si no hay en el √°rea
            doctor = random.choice(doctores_area)
            
            # Buscar enfermeros en esa √°rea, si no hay, usar cualquier enfermero
            enfermeros_area = [e for e in enfermeros if e.areaEspecialidad == area]
            if not enfermeros_area:
                enfermeros_area = enfermeros  # Usar cualquier enfermero si no hay en el √°rea
            enfermero = random.choice(enfermeros_area)
            
            # Generar fecha de nacimiento realista
            edad = random.randint(18, 85)
            fecha_nacimiento = datetime.now().date() - timedelta(days=edad*365 + random.randint(0, 365))
            
            paciente, created = Paciente.objects.get_or_create(
                num_seguridad_social=f'SS{i+1:04d}2024',
                defaults={
                    'nombres': nombre,
                    'apellidos': apellido,
                    'fecha_nacimiento': fecha_nacimiento,
                    'sexo': sexo,
                    'area': area,
                    'doctor_actual': doctor,
                    'enfermero_actual': enfermero,
                    'hospital_origen': 'Hospital General',
                    'esta_activo': True,
                    'numero_ingresos': 1
                }
            )
            
            if created:
                # Asignar nivel de gravedad basado en el √°rea
                if area.nombre in ['Cuidados Intensivos', 'Urgencias']:
                    # M√°s probabilidad de pacientes graves en UCI y Urgencias
                    nivel_gravedad = random.choices([1, 2, 3], weights=[30, 40, 30])[0]
                elif area.nombre in ['Cardiolog√≠a', 'Neurolog√≠a']:
                    # Distribuci√≥n media en especialidades cr√≠ticas
                    nivel_gravedad = random.choices([1, 2, 3], weights=[40, 45, 15])[0]
                else:
                    # Mayor√≠a pacientes leves en otras √°reas
                    nivel_gravedad = random.choices([1, 2, 3], weights=[60, 30, 10])[0]
                
                GravedadPaciente.objects.create(
                    paciente=paciente,
                    nivel_gravedad=nivel_gravedad
                )
                
                self.stdout.write(f'  ‚úì Paciente: {nombre} {apellido} - {area.nombre} (Gravedad: {nivel_gravedad})')
            
            pacientes.append(paciente)
        
        return pacientes

    def crear_asignaciones_calendario(self, enfermeros, areas):
        """Crear asignaciones de calendario para enfermeros"""
        self.stdout.write('üìÖ Creando asignaciones de calendario...')
        
        if not enfermeros:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è No hay enfermeros para asignar'))
            return
        
        if not areas:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è No hay √°reas disponibles'))
            return
        
        a√±o_actual = datetime.now().year
        
        # Crear asignaciones para cada enfermero en diferentes bimestres
        for enfermero in enfermeros:
            # Asignar 2-3 bimestres aleatorios para cada enfermero
            bimestres_asignados = random.sample(range(1, 7), random.randint(2, 3))
            
            for bimestre in bimestres_asignados:
                # Calcular fechas del bimestre
                mes_inicio = ((bimestre - 1) * 2) + 1
                fecha_inicio = datetime(a√±o_actual, mes_inicio, 1)
                
                if mes_inicio + 1 <= 12:
                    import calendar
                    ultimo_dia_mes2 = calendar.monthrange(a√±o_actual, mes_inicio + 1)[1]
                    fecha_fin = datetime(a√±o_actual, mes_inicio + 1, ultimo_dia_mes2)
                else:
                    fecha_fin = datetime(a√±o_actual, 12, 31)
                
                # Asignar √°rea (preferencia por su especialidad, pero puede ser otra)
                if enfermero.areaEspecialidad and random.random() < 0.7:  # 70% probabilidad
                    area = enfermero.areaEspecialidad
                else:
                    area = random.choice(areas)
                
                AsignacionCalendario.objects.get_or_create(
                    enfermero=enfermero,
                    bimestre=bimestre,
                    year=a√±o_actual,
                    defaults={
                        'area': area,
                        'fecha_inicio': fecha_inicio.date(),
                        'fecha_fin': fecha_fin.date(),
                        'activo': True
                    }
                )
        
        total_asignaciones = AsignacionCalendario.objects.filter(activo=True).count()
        self.stdout.write(f'  ‚úì {total_asignaciones} asignaciones de calendario creadas')

    def asignar_prioridades_areas(self, areas):
        """Asignar niveles de prioridad a las √°reas"""
        self.stdout.write('‚≠ê Asignando prioridades a √°reas...')
        
        # Asignar prioridades espec√≠ficas seg√∫n el tipo de √°rea
        prioridades = {
            'Cuidados Intensivos': 5,
            'Urgencias': 5,
            'Cardiolog√≠a': 4,
            'Neurolog√≠a': 4,
            'Cirug√≠a': 4,
            'Pediatr√≠a': 3,
            'Medicina Interna': 2,
            'Traumatolog√≠a': 3,
        }
        
        for area in areas:
            prioridad = prioridades.get(area.nombre, 2)  # Default: prioridad 2
            
            NivelPrioridadArea.objects.get_or_create(
                area=area,
                defaults={'nivel_prioridad': prioridad}
            )
            
            self.stdout.write(f'  ‚úì {area.nombre}: Prioridad {prioridad}')

    def mostrar_resumen(self, areas, enfermeros, doctores, pacientes):
        """Mostrar resumen de datos creados"""
        self.stdout.write('\nüìä RESUMEN DE DATOS CREADOS:')
        self.stdout.write(f'  ‚Ä¢ {len(areas)} √°reas de especialidad')
        self.stdout.write(f'  ‚Ä¢ {len(enfermeros)} enfermeros')
        self.stdout.write(f'  ‚Ä¢ {len(doctores)} doctores')
        self.stdout.write(f'  ‚Ä¢ {len(pacientes)} pacientes')
        
        # Resumen por √°rea
        self.stdout.write('\nüè• DISTRIBUCI√ìN POR √ÅREA:')
        for area in areas:
            pacientes_area = len([p for p in pacientes if p.area == area])
            enfermeros_area = len([e for e in enfermeros if e.areaEspecialidad == area])
            self.stdout.write(f'  ‚Ä¢ {area.nombre}: {pacientes_area} pacientes, {enfermeros_area} enfermeros')
        
        # Informaci√≥n de acceso
        self.stdout.write('\nüîë CREDENCIALES DE ACCESO:')
        self.stdout.write('  ‚Ä¢ Jefa de Piso: jefa_piso / jefa123')
        self.stdout.write('  ‚Ä¢ Enfermeros: enf_ana01, enf_carlos02, etc. / enf123')
        self.stdout.write('  ‚Ä¢ Doctores: doc_juan01, doc_laura02, etc. / doc123')
        
        self.stdout.write('\n‚úÖ ¬°Listo para probar el sistema de sobrecarga!')