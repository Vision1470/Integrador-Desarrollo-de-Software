from django.core.management.base import BaseCommand
from django.utils import timezone
from django.db import transaction
from datetime import datetime, timedelta
import random

from login.models import Usuarios, AreaEspecialidad, Fortaleza
from usuarioJefa.models import (
    Paciente, Compuesto, Medicamento, Instrumento, 
    GravedadPaciente
)


class Command(BaseCommand):
    help = 'Poblar la base de datos con enfermeros, pacientes, medicamentos e instrumentos'

    def add_arguments(self, parser):
        parser.add_argument(
            '--enfermeros',
            type=int,
            default=30,
            help='N√∫mero de enfermeros a crear (default: 30)',
        )
        parser.add_argument(
            '--pacientes',
            type=int,
            default=60,
            help='N√∫mero de pacientes a crear (default: 60)',
        )
        parser.add_argument(
            '--limpiar',
            action='store_true',
            help='Limpiar datos existentes antes de crear',
        )

    def handle(self, *args, **options):
        num_enfermeros = options['enfermeros']
        num_pacientes = options['pacientes']
        limpiar = options['limpiar']
        
        self.stdout.write(
            self.style.SUCCESS(f'üöÄ Creando {num_enfermeros} enfermeros y {num_pacientes} pacientes...')
        )
        
        try:
            with transaction.atomic():
                # Limpiar datos existentes si se solicita
                if limpiar:
                    self.limpiar_datos_existentes()
                
                # Validar que existen √°reas y fortalezas
                areas = list(AreaEspecialidad.objects.all())
                fortalezas = list(Fortaleza.objects.all())
                
                if not areas:
                    self.stdout.write(
                        self.style.ERROR('‚ùå No hay √°reas creadas. Crea √°reas primero.')
                    )
                    return
                
                if not fortalezas:
                    self.stdout.write(
                        self.style.WARNING('‚ö†Ô∏è No hay fortalezas creadas. Continuando sin asignar fortalezas.')
                    )
                
                # Crear solo lo solicitado
                enfermeros = self.crear_enfermeros(areas, fortalezas, num_enfermeros)
                self.crear_medicamentos_instrumentos()
                pacientes = self.crear_pacientes(areas, num_pacientes)
                
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ Poblaci√≥n completada exitosamente!')
                )
                self.mostrar_resumen(areas, enfermeros, pacientes)
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Error al poblar base de datos: {str(e)}')
            )
            import traceback
            traceback.print_exc()

    def limpiar_datos_existentes(self):
        """Limpia solo enfermeros y pacientes de prueba"""
        self.stdout.write('üßπ Limpiando datos existentes...')
        
        # Eliminar enfermeros de prueba (que empiecen con 'enf_test_' o 'enf_')
        enfermeros_eliminados = Usuarios.objects.filter(
            tipoUsuario='EN',
            username__startswith='enf_'
        ).delete()[0]
        
        # Eliminar pacientes de prueba
        pacientes_eliminados = Paciente.objects.filter(
            nombres__startswith='Paciente_'
        ).delete()[0]
        
        self.stdout.write(f'  ‚úì {enfermeros_eliminados} enfermeros eliminados')
        self.stdout.write(f'  ‚úì {pacientes_eliminados} pacientes eliminados')

    def crear_enfermeros(self, areas, fortalezas, cantidad):
        """Crear enfermeros"""
        self.stdout.write(f'üë®‚Äç‚öïÔ∏è Creando {cantidad} enfermeros...')
        
        nombres = [
            'Ana', 'Carlos', 'Luc√≠a', 'Miguel', 'Elena', 'David',
            'Carmen', 'Alejandro', 'Isabel', 'Roberto', 'Patricia',
            'Francisco', 'Beatriz', 'Javier', 'Cristina', 'Sergio',
            'Mar√≠a', 'Jos√©', 'Laura', 'Antonio', 'Sof√≠a', 'Manuel',
            'Andrea', 'Fernando', 'M√≥nica', 'Ricardo', 'Diana',
            'Ra√∫l', 'Natalia', 'Esteban', 'Claudia', '√ìscar',
            'Valeria', 'Iv√°n', 'Paola', 'Jorge', 'Camila', 'Andr√©s',
            'Lorena', 'Gabriel', 'Marcela', 'Felipe', 'Adriana'
        ]
        
        apellidos = [
            'Garc√≠a', 'Rodr√≠guez', 'Gonz√°lez', 'Fern√°ndez', 'L√≥pez',
            'Mart√≠nez', 'S√°nchez', 'P√©rez', 'G√≥mez', 'Mart√≠n',
            'Jim√©nez', 'Ruiz', 'Hern√°ndez', 'D√≠az', 'Moreno',
            '√Ålvarez', 'Romero', 'Torres', 'Vargas', 'Castillo',
            'Ortega', 'Ramos', 'Delgado', 'Castro', 'Herrera'
        ]
        
        enfermeros = []
        contador_exitosos = 0
        
        for i in range(cantidad):
            # Generar datos aleatorios
            nombre = random.choice(nombres)
            apellido = random.choice(apellidos)
            username = f'enf_test_{i+1:03d}'
            
            # Verificar que no existe
            if Usuarios.objects.filter(username=username).exists():
                self.stdout.write(f'  ‚ö†Ô∏è Usuario {username} ya existe, saltando...')
                continue
            
            try:
                # Asignar √°rea aleatoria (70% probabilidad de tener especialidad)
                area_especialidad = random.choice(areas) if random.random() < 0.7 else None
                
                # Crear enfermero
                enfermero = Usuarios.objects.create(
                    username=username,
                    first_name=nombre,
                    apellidos=apellido,
                    tipoUsuario='EN',
                    edad=random.randint(23, 55),
                    fechaNacimiento=f'{random.randint(1970, 2000)}-{random.randint(1, 12):02d}-{random.randint(1, 28):02d}',
                    areaEspecialidad=area_especialidad,
                    estaActivo=True,
                    primerIngreso=False,
                    email=f'{username}@hospital.com'
                )
                
                # Establecer contrase√±a
                enfermero.set_password('123456')
                
                # Asignar fortalezas aleatorias (1-4 fortalezas)
                if fortalezas:
                    num_fortalezas = random.randint(1, min(4, len(fortalezas)))
                    fortalezas_asignadas = random.sample(fortalezas, num_fortalezas)
                    enfermero.fortalezas.set(fortalezas_asignadas)
                
                enfermero.save()
                enfermeros.append(enfermero)
                contador_exitosos += 1
                
                especialidad_txt = area_especialidad.nombre if area_especialidad else "Sin especialidad"
                self.stdout.write(f'  ‚úì {username}: {nombre} {apellido} ({especialidad_txt})')
                
            except Exception as e:
                self.stdout.write(f'  ‚ùå Error creando {username}: {str(e)}')
                continue
        
        self.stdout.write(f'  ‚úÖ {contador_exitosos} enfermeros creados exitosamente')
        return enfermeros

    def crear_medicamentos_instrumentos(self):
        """Crear medicamentos e instrumentos"""
        self.stdout.write('üíä Creando medicamentos e instrumentos...')
        
        # Crear compuestos si no existen
        compuestos_data = [
            'Paracetamol', 'Ibuprofeno', 'Aspirina', 'Amoxicilina',
            'Diclofenaco', 'Omeprazol', 'Losart√°n', 'Metformina',
            'Captopril', 'Atorvastatina', 'Ranitidina', 'Loratadina'
        ]
        
        compuestos = []
        for nombre in compuestos_data:
            compuesto, created = Compuesto.objects.get_or_create(
                nombre=nombre,
                defaults={'descripcion': f'Compuesto activo {nombre}'}
            )
            compuestos.append(compuesto)
            if created:
                self.stdout.write(f'  ‚úì Compuesto: {nombre}')
        
        # Crear medicamentos
        medicamentos_data = [
            ('Paracetamol 500mg', '500', [0], random.randint(100, 500)),
            ('Ibuprofeno 400mg', '400', [1], random.randint(80, 300)),
            ('Aspirina 100mg', '100', [2], random.randint(200, 400)),
            ('Amoxicilina 500mg', '500', [3], random.randint(50, 150)),
            ('Diclofenaco 50mg', '50', [4], random.randint(60, 200)),
            ('Omeprazol 20mg', '20', [5], random.randint(100, 250)),
            ('Losart√°n 50mg', '50', [6], random.randint(80, 180)),
            ('Metformina 850mg', '850', [7], random.randint(150, 300)),
            ('Captopril 25mg', '25', [8], random.randint(90, 200)),
            ('Atorvastatina 20mg', '20', [9], random.randint(70, 150)),
        ]
        
        contador_medicamentos = 0
        for nombre, gramaje, compuestos_indices, cantidad in medicamentos_data:
            try:
                medicamento, created = Medicamento.objects.get_or_create(
                    nombre=nombre,
                    gramaje=gramaje,
                    defaults={'cantidad_disponible': cantidad}
                )
                if created:
                    medicamento.compuestos.set([compuestos[i] for i in compuestos_indices])
                    contador_medicamentos += 1
                    self.stdout.write(f'  ‚úì Medicamento: {nombre} ({cantidad} unidades)')
            except Exception as e:
                self.stdout.write(f'  ‚ùå Error creando medicamento {nombre}: {str(e)}')
        
        # Crear instrumentos
        instrumentos_data = [
            ('Tensi√≥metro Digital', random.randint(10, 20), 'Monitor de presi√≥n arterial autom√°tico'),
            ('Term√≥metro Infrarrojo', random.randint(20, 35), 'Term√≥metro sin contacto'),
            ('Ox√≠metro de Pulso', random.randint(25, 40), 'Medidor de saturaci√≥n de ox√≠geno'),
            ('Estetoscopio', random.randint(15, 25), 'Estetoscopio cl√≠nico profesional'),
            ('Jeringas 5ml', random.randint(400, 600), 'Jeringas desechables de 5ml'),
            ('Gasas Est√©riles', random.randint(150, 250), 'Gasas est√©riles 10x10cm'),
            ('Vendas El√°sticas', random.randint(80, 120), 'Vendas el√°sticas de diferentes tama√±os'),
            ('Cat√©teres IV', random.randint(50, 100), 'Cat√©teres intravenosos calibre 18-22'),
            ('Guantes Latex', random.randint(500, 800), 'Guantes de l√°tex est√©riles'),
            ('Mascarillas N95', random.randint(100, 200), 'Mascarillas de protecci√≥n respiratoria'),
        ]
        
        contador_instrumentos = 0
        for nombre, cantidad, especificaciones in instrumentos_data:
            try:
                instrumento, created = Instrumento.objects.get_or_create(
                    nombre=nombre,
                    defaults={
                        'cantidad': cantidad,
                        'especificaciones': especificaciones
                    }
                )
                if created:
                    contador_instrumentos += 1
                    self.stdout.write(f'  ‚úì Instrumento: {nombre} ({cantidad} unidades)')
            except Exception as e:
                self.stdout.write(f'  ‚ùå Error creando instrumento {nombre}: {str(e)}')
        
        self.stdout.write(f'  ‚úÖ {contador_medicamentos} medicamentos y {contador_instrumentos} instrumentos creados')

    def crear_pacientes(self, areas, cantidad):
        """Crear pacientes con diferentes niveles de gravedad"""
        self.stdout.write(f'üè• Creando {cantidad} pacientes...')
        
        # Validar que hay doctores disponibles
        doctores = list(Usuarios.objects.filter(tipoUsuario='DR', estaActivo=True))
        if not doctores:
            self.stdout.write(self.style.ERROR('‚ùå No hay doctores disponibles. Los pacientes se crear√°n sin doctor asignado.'))
        
        nombres_masculinos = [
            'Jos√©', 'Antonio', 'Manuel', 'Francisco', 'Juan', 'Luis',
            'Miguel', 'Jes√∫s', 'Rafael', 'Carlos', 'Andr√©s', 'Ricardo',
            'Fernando', 'Eduardo', 'Ram√≥n', 'Alberto', 'Enrique', 'Vicente',
            '√Ångel', 'Pablo', '√Ålvaro', 'Diego', 'Sergio', 'Mario'
        ]
        
        nombres_femeninos = [
            'Mar√≠a', 'Carmen', 'Pilar', 'Dolores', 'Mercedes', 'Antonia',
            'Francisca', 'Isabel', 'Ana', 'Rosario', 'Teresa', 'Concepci√≥n',
            'Esperanza', 'Purificaci√≥n', 'Amparo', 'Gloria', 'Remedios',
            'Cristina', 'Silvia', 'Beatriz', 'Luc√≠a', 'Elena', 'Patricia'
        ]
        
        apellidos = [
            'Garc√≠a', 'Rodr√≠guez', 'Gonz√°lez', 'Fern√°ndez', 'L√≥pez',
            'Mart√≠nez', 'S√°nchez', 'P√©rez', 'G√≥mez', 'Mart√≠n',
            'Jim√©nez', 'Ruiz', 'Hern√°ndez', 'D√≠az', 'Moreno',
            '√Ålvarez', 'Romero', 'Torres', 'Vargas', 'Castillo',
            'Navarro', 'Ramos', 'Gil', 'Serrano', 'Blanco'
        ]
        
        pacientes = []
        contador_exitosos = 0
        
        for i in range(cantidad):
            try:
                # Generar datos b√°sicos
                sexo = random.choice(['M', 'F'])
                if sexo == 'M':
                    nombre = random.choice(nombres_masculinos)
                else:
                    nombre = random.choice(nombres_femeninos)
                
                apellido = random.choice(apellidos)
                segundo_apellido = random.choice(apellidos)
                
                # Generar NSS √∫nico
                nss = f'SS{i+1:04d}{random.randint(1000, 9999)}'
                
                # Verificar que no existe
                if Paciente.objects.filter(num_seguridad_social=nss).exists():
                    nss = f'SS{i+1:04d}{random.randint(10000, 99999)}'
                
                # Generar edad y fecha de nacimiento
                edad = random.randint(18, 85)
                fecha_nacimiento = datetime.now().date() - timedelta(days=edad*365 + random.randint(0, 365))
                
                # Asignar √°rea aleatoria
                area = random.choice(areas)
                
                # Asignar doctor si hay disponibles
                doctor = None
                if doctores:
                    # Preferir doctores del √°rea
                    doctores_area = [d for d in doctores if d.areaEspecialidad == area]
                    if doctores_area:
                        doctor = random.choice(doctores_area)
                    else:
                        doctor = random.choice(doctores)
                
                paciente = Paciente.objects.create(
                    num_seguridad_social=nss,
                    nombres=nombre,
                    apellidos=f'{apellido} {segundo_apellido}',
                    fecha_nacimiento=fecha_nacimiento,
                    sexo=sexo,
                    area=area,
                    doctor_actual=doctor,
                    hospital_origen=random.choice([
                        'Hospital General', 'Cl√≠nica Santa Mar√≠a', 
                        'Centro M√©dico Nacional', 'Hospital Regional'
                    ]),
                    esta_activo=True,
                    numero_ingresos=random.randint(1, 3)
                )
                
                # Asignar nivel de gravedad basado en el √°rea
                if area.nombre in ['Cuidados Intensivos', 'Urgencias']:
                    # M√°s probabilidad de pacientes graves
                    nivel_gravedad = random.choices([1, 2, 3], weights=[20, 40, 40])[0]
                elif area.nombre in ['Cardiolog√≠a', 'Neurolog√≠a', 'Cirug√≠a']:
                    # Distribuci√≥n media
                    nivel_gravedad = random.choices([1, 2, 3], weights=[40, 40, 20])[0]
                else:
                    # Mayor√≠a pacientes leves
                    nivel_gravedad = random.choices([1, 2, 3], weights=[70, 25, 5])[0]
                
                GravedadPaciente.objects.create(
                    paciente=paciente,
                    nivel_gravedad=nivel_gravedad
                )
                
                pacientes.append(paciente)
                contador_exitosos += 1
                
                gravedad_txt = {1: 'Leve', 2: 'Moderada', 3: 'Grave'}[nivel_gravedad]
                self.stdout.write(f'  ‚úì {nombre} {apellido}: {area.nombre} (Gravedad: {gravedad_txt})')
                
            except Exception as e:
                self.stdout.write(f'  ‚ùå Error creando paciente {i+1}: {str(e)}')
                continue
        
        self.stdout.write(f'  ‚úÖ {contador_exitosos} pacientes creados exitosamente')
        return pacientes

    def mostrar_resumen(self, areas, enfermeros, pacientes):
        """Mostrar resumen de datos creados"""
        self.stdout.write('\nüìä RESUMEN DE DATOS CREADOS:')
        self.stdout.write(f'  ‚Ä¢ {len(enfermeros)} enfermeros')
        self.stdout.write(f'  ‚Ä¢ {len(pacientes)} pacientes')
        
        # Resumen por √°rea
        self.stdout.write('\nüè• DISTRIBUCI√ìN POR √ÅREA:')
        for area in areas:
            pacientes_area = len([p for p in pacientes if p.area == area])
            enfermeros_area = len([e for e in enfermeros if e.areaEspecialidad == area])
            self.stdout.write(f'  ‚Ä¢ {area.nombre}: {pacientes_area} pacientes, {enfermeros_area} enfermeros')
        
        # Distribuci√≥n por gravedad
        self.stdout.write('\n‚ö° DISTRIBUCI√ìN POR GRAVEDAD:')
        gravedad_1 = len([p for p in pacientes if hasattr(p, 'gravedadpaciente_set') and p.gravedadpaciente_set.first() and p.gravedadpaciente_set.first().nivel_gravedad == 1])
        gravedad_2 = len([p for p in pacientes if hasattr(p, 'gravedadpaciente_set') and p.gravedadpaciente_set.first() and p.gravedadpaciente_set.first().nivel_gravedad == 2])
        gravedad_3 = len([p for p in pacientes if hasattr(p, 'gravedadpaciente_set') and p.gravedadpaciente_set.first() and p.gravedadpaciente_set.first().nivel_gravedad == 3])
        
        self.stdout.write(f'  ‚Ä¢ Leves: {gravedad_1}')
        self.stdout.write(f'  ‚Ä¢ Moderados: {gravedad_2}')
        self.stdout.write(f'  ‚Ä¢ Graves: {gravedad_3}')
        
        # Informaci√≥n de acceso
        self.stdout.write('\nüîë CREDENCIALES DE PRUEBA:')
        self.stdout.write('  ‚Ä¢ Enfermeros: enf_test_001, enf_test_002, etc.')
        self.stdout.write('  ‚Ä¢ Contrase√±a: 123456')
        
        self.stdout.write('\n‚úÖ ¬°Listo para probar las sugerencias con m√°s datos!')